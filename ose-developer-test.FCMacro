"""
OSE Developer Test Macro

  +---+
 /   /|
+---+ |
|   | | H
|   | |
|   | +
|   |/ S
+---+
  S

Dimensions of 8 hole tubing:
    Side: 101.60
    Height: 812.80

Width and length are equal making the 8 hole tubing a square prism.
"""
import os

import Draft
import FreeCAD
import FreeCADGui
import Part
import ScrewMaker
import Sketcher
from FreeCAD import Placement, Rotation, Vector


def main():
    document = open_eight_hole_tubing()
    initial_eight_hole_tubing = FreeCAD.ActiveDocument.ActiveObject
    tubes = clone_tubes_for_cube(initial_eight_hole_tubing)
    arrange_tubes_into_cube(tubes)
    create_screw_and_nut_through_corner_of_cube()
    create_pocketed_initials(document)


def open_eight_hole_tubing():
    """
    Opens 8 hole tubing.fcstd from tubing library.
    """
    script_path = os.path.dirname(os.path.abspath(__file__))
    eight_hole_tubing_path = os.path.join(script_path, 'Tubing Library/8 hole tubing.fcstd')
    return FreeCAD.open(eight_hole_tubing_path)


def clone_tubes_for_cube(initial_tube):
    """
    Clones initial tube 12 times for cube.
    """
    label = '8 hole tubing %s'
    initial_tube.Label = label % 1
    num_tubing_clones = 12
    tubes = [initial_tube]
    for i in range(2, num_tubing_clones + 1):
        cloned_tube = Draft.clone(initial_tube)
        cloned_tube.Label = label % i
        tubes.append(cloned_tube)
    return tubes


def arrange_tubes_into_cube(tubes):
    """
    Arranges a list of tubes into a cube based on tube dimension.
    """
    side = 101.6
    height = 812.80
    half_side = 101.6 / 2

    # TODO: Break function up into sub-functions: arrange_base, arrange_walls, and arrange_top
    tubes[0].Placement = Placement(Vector(-half_side, side, half_side), Rotation(Vector(0, 1, 0), 90))
    tubes[1].Placement = Placement(Vector((height - side), 0, 0), Rotation(Vector(0, 0, 1), 0))
    tubes[2].Placement = Placement(Vector(side, -half_side, (side + half_side)), Rotation(Vector(1, 0, 0), -90))
    tubes[3].Placement = Placement(Vector(0, (height - side), 0), Rotation(Vector(0, 0, 1), 0))
    tubes[4].Placement = Placement(Vector(-half_side, (height - side * 2), half_side), Rotation(Vector(0, 1, 0), 90))
    tubes[5].Placement = Placement(Vector((height - side), (height - side), 0), Rotation(Vector(0, 0, 1), 0))
    tubes[6].Placement = Placement(Vector((height - side * 2), -half_side, (side + half_side)), Rotation(Vector(-1, 0, 0), 90))
    tubes[7].Placement = Placement(Vector(side, -half_side, (height - side - half_side)), Rotation(Vector(-1, 0, 0), 90))
    tubes[8].Placement = Placement(Vector((height - side * 2), -half_side, (height - side - half_side)), Rotation(Vector(-1, 0, 0), 90))
    tubes[9].Placement = Placement(Vector(-half_side, side, height - half_side), Rotation(Vector(0, 1, 0), 90))
    tubes[10].Placement = Placement(Vector(-half_side, (height - side * 2), height - half_side), Rotation(Vector(0, 1, 0), 90))


def create_screw_and_nut_through_corner_of_cube():
    sm = ScrewMaker.Instance()
    screw = sm.createFastener('ISO4014', 'M30', '220', 'simple')
    # Place screw through holes of 8 hole tubing 10 & 12 in corner of cube
    screw.Placement = Placement(Vector(0, 152.4, 762), Rotation(Vector(-1, 0, 0), 90))

    nut = sm.createFastener('ISO4032', '(M33)', 0, 'simple')
    # Place nut on end of screw
    nut.Placement = Placement(Vector(0, -65.45, 762), Rotation(Vector(-1, 0, 0), 90))


def create_pocketed_initials(document):
    # Create body
    document.addObject('PartDesign::Body', 'Body')
    document.Body.BaseFeature = document.Clone011
    FreeCADGui.activeView().setActiveObject('pdbody', document.Body)
    FreeCADGui.Selection.clearSelection()
    FreeCADGui.Selection.addSelection(document.BaseFeature, 'Face4')

    # Create Sketch
    FreeCADGui.ActiveDocument.Clone011.Visibility = False
    document.Body.newObject('Sketcher::SketchObject', 'Sketch')
    document.Sketch.Support = (document.BaseFeature, ["Face4"])
    document.Sketch.MapMode = 'FlatFace'
    FreeCADGui.activeDocument().setEdit('Sketch')

    create_initials_in_sketch(document)

    document.Body.newObject("PartDesign::Pocket", "Pocket")
    document.Pocket.Profile = document.Sketch
    document.Pocket.Length = 5.0
    FreeCADGui.activeDocument().hide("Sketch")
    FreeCADGui.ActiveDocument.Pocket.ShapeColor = FreeCADGui.ActiveDocument.Body.ShapeColor
    FreeCADGui.ActiveDocument.Pocket.LineColor = FreeCADGui.ActiveDocument.Body.LineColor
    FreeCADGui.ActiveDocument.Pocket.PointColor = FreeCADGui.ActiveDocument.Body.PointColor
    FreeCADGui.ActiveDocument.Pocket.Transparency = FreeCADGui.ActiveDocument.Body.Transparency
    FreeCADGui.ActiveDocument.Pocket.DisplayMode = FreeCADGui.ActiveDocument.Body.DisplayMode
    FreeCADGui.activeDocument().setEdit('Pocket', 0)
    FreeCADGui.Selection.clearSelection()

    FreeCADGui.activeDocument().hide("Sketch")
    document.Pocket.Length = 5.000000
    document.Pocket.Length2 = 100.000000
    document.Pocket.Type = 0
    document.Pocket.UpToFace = None
    document.Pocket.Reversed = 0
    document.Pocket.Midplane = 0
    document.Pocket.Offset = 0.000000
    FreeCADGui.activeDocument().hide("BaseFeature")
    FreeCADGui.activeDocument().resetEdit()


def create_initials_in_sketch(document):
    create_g_initial_in_sketch(document)
    # TODO: create_r_initial_in_sketch


def create_g_initial_in_sketch(document):
    # Outer arc of G
    document.Sketch.addGeometry(Part.ArcOfCircle(Part.Circle(Vector(-24.5, 0, 0), Vector(0, 0, 1), 20.7), 0.75, 6), False)
    document.Sketch.addConstraint(Sketcher.Constraint('PointOnObject', 0, 3, -1))
    document.Sketch.addConstraint(Sketcher.Constraint('PointOnObject', 0, 2, -1))

    # Horizontal mid-line of G
    document.Sketch.addGeometry(Part.LineSegment(Vector(-3.9, 0, 0), Vector(-24.5, 0, 0)), False)
    document.Sketch.addConstraint(Sketcher.Constraint('Coincident', 1, 1, 0, 2))

    # Inner arc of G
    document.Sketch.addGeometry(Part.ArcOfCircle(Part.Circle(Vector(-24.5, 0, 0), Vector(0, 0, 1), 15.5), 0.75, 6), False)
    document.Sketch.addConstraint(Sketcher.Constraint('Coincident', 2, 3, 1, 2))

    # Lower horizontal mid-line of G
    document.Sketch.addGeometry(Part.LineSegment(Vector(-9.6, -4.3, 0), Vector(-24.5, -4.3, 0)), False)
    document.Sketch.addConstraint(Sketcher.Constraint('Coincident', 3, 1, 2, 2))
    document.Sketch.addConstraint(Sketcher.Constraint('Horizontal', 3))

    # Connecting line between two horizontal mid-lines
    document.Sketch.addGeometry(Part.LineSegment(Vector(-24.5, 0, 0), Vector(-24.5, -4.3, 0)), False)
    document.Sketch.addConstraint(Sketcher.Constraint('Coincident', 4, 1, 0, 3))
    document.Sketch.addConstraint(Sketcher.Constraint('Coincident', 4, 2, 3, 2))
    document.Sketch.addConstraint(Sketcher.Constraint('Coincident', 0, 3, 1, 2))
    document.Sketch.addConstraint(Sketcher.Constraint('Vertical', 4))

    # Connecting line between outer and inner arcs
    document.Sketch.addGeometry(Part.LineSegment(Vector(-9.4, 13.8, 0), Vector(-13.8, 11.2, 0)), False)
    document.Sketch.addConstraint(Sketcher.Constraint('Coincident', 5, 1, 0, 1))
    document.Sketch.addConstraint(Sketcher.Constraint('Coincident', 5, 2, 2, 1))


if __name__ == "__main__":
    main()
